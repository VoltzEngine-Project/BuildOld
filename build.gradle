buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
      classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
      classpath 'org.ajoberstar:gradle-git:1.3.2'
      classpath 'org.ajoberstar:grgit:1.4.1'
    }
}

plugins {
  id 'com.gradle.build-scan' version '1.4'
  id "com.matthewprenger.cursegradle" version "1.0.8"
  id 'net.saliman.cobertura' version '2.2.5'
  id 'com.github.kt3k.coveralls' version '2.0.1'
  //id "com.github.johnrengelman.shadow" version "1.2.2"
  id "net.franz-becker.gradle-lombok" version "1.3"
  id 'com.jfrog.bintray' version '1.1'
  id "se.bjurr.gitchangelog.git-changelog-gradle-plugin" version "1.32"
}

apply from: 'https://raw.githubusercontent.com/BuiltBrokenModding/BuiltBrokenScripts/buildScripts/index/index.gradle'
apply plugin: 'org.ajoberstar.grgit'
apply plugin: 'curseforge'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'jacoco'
apply from: 'https://raw.githubusercontent.com/BuiltBrokenModding/BuiltBrokenScripts/buildScripts/scripts/forge/deps.gradle'

minecraft {
    replaceIn "References.java"
    replaceIn "com/builtbroken/mc/core/deps/DepDownloader.java"
    replace "@bbm_url@", bbm_url
    replace "@CL@", coding_lib
    replace "@CL-name@", CL_name
    replace "@CL_maj@", CL_major
    replace "@CL_min@", CL_minor
    replace "@CL_rev@", CL_revis
    replace "@CL_bu@", CL_build
}

def currentJvm = org.gradle.internal.jvm.Jvm.current()
println "Current Java version = " + currentJvm

sourceCompatibility = 1.8
targetCompatibility = 1.8

lombok {
    // optional: values below are the defaults
    version = "1.16.4"
    sha256 = "3ca225ce3917eac8bf4b7d2186845df4e70dcdede356dca8537b6d78a535c91e"
}

task deployCurse {
    dependsOn 'curseforge227048'
}

import org.ajoberstar.grgit.*

def gitHash = 'unknown'
if (new File(projectDir, '.git').exists()) {
    def repo = Grgit.open(project.file('.'))
    gitHash = repo.log().find().abbreviatedId
}

//task curseTest {
//  if ( grgit.log().find ) { it.fullMessage.contains("[deploy]") {
//  curseTest.dependsOn deployCurse
//  }
//}
//}
//tasks.build.dependsOn tasks.curseforge

jar {
     manifest.mainAttributes(
            "Built-By": System.getProperty('user.name'),
            "Created-By": currentJvm,
            "Implementation-Title": archivesBaseName,
            "Implementation-Version": project.version,
            "Git-Hash": gitHash,
            "FMLCorePlugin": coremod,
            "FMLCorePluginContainsFMLMod": "true",
            "FMLAT": "VE_at.cfg")
}

deobfJar {
     manifest.mainAttributes(
            "Built-By": System.getProperty('user.name'),
            "Created-By": currentJvm,
            "Implementation-Title": archivesBaseName,
            "Implementation-Version": project.version,
            "Git-Hash": gitHash,
            "FMLCorePlugin": coremod,
            "FMLCorePluginContainsFMLMod": "true",
            "FMLAT": "VE_at.cfg")
}

sourcesJar {
     manifest.mainAttributes(
            "Built-By": System.getProperty('user.name'),
            "Created-By": currentJvm,
            "Implementation-Title": archivesBaseName,
            "Implementation-Version": project.version,
            "Git-Hash": gitHash,
            "FMLCorePlugin": coremod,
            "FMLCorePluginContainsFMLMod": "true",
            "FMLAT": "VE_at.cfg")
}

dependencies {
    compile name: 'CoFHLib', version: "${cofhlib_version}", ext: 'jar'
	compile name: 'CoFHCore', version: "${cofhcore_version}", ext: 'jar'
	compile name: 'RedstoneArsenal', version: "${rars_version}", ext: 'jar'
	compile name: 'ThermalExpansion', version: "${texpansion_version}", ext: 'jar'
	compile name: 'ThermalFoundation', version: "${tfoundation_version}", ext: 'jar'
}

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

buildScan {
    licenseAgreementUrl = 'https://gradle.com/terms-of-service'
    licenseAgree = 'yes'
}
task apiZip (type: Jar) {
    if (project.getProperty("bambooshortPlanName") == "BBM-Dev") classifier = "dev-api"
    else classifier = "api"
    from sourceSets*.allSource
    include "com/builtbroken/mc/api/**"
    destinationDir = file 'output'
    mustRunAfter "jar"
}

task makeChangelog(type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
    filePath = "changelog.html"
    untaggedName = "Current release ${project.version}"
    fromCommit = startGitRev
    toRef =  "HEAD"
    templateContent = """
{{#tags}}
<h1> Highly untested and may break world</h1>
  <h3>{{name}}</h3>
  <ul>
    {{#commits}}
    <li> <a href="https://github.com/BuiltBrokenModding/VoltzEngine/commit/{{hash}}" target=_blank> {{{message}}}</a>
</li>
    {{/commits}}
  </ul>
{{/tags}}
"""
}


publishing {
    publications {
        mavenJava(MavenPublication)
        {
            artifact apiZip
        }
    }
}

tasks.build.dependsOn apiZip